{"version":3,"sources":["components/Editor.js","hooks/UseLocalStorage.js","components/App.js","index.js"],"names":["Editor","props","language","displayName","value","onChange","useState","open","setOpen","className","icon","CodeOffOutlinedIcon","onClick","prevOpen","type","faCompressAlt","faExpandAlt","onBeforeChange","editor","data","options","lineWrapping","lint","mode","lineNumbers","theme","autoCloseBrackets","matchBrackets","highlightNonMatching","autoCloseTags","fullScreen","UseLocalStorage","key","initialValue","prefixedKey","jsonValue","localStorage","getItem","JSON","parse","setValue","useEffect","setItem","stringify","App","html","setHtml","css","setCss","javascript","setJavascript","srcDoc","setSrcDoc","isEnter","setIsEnter","timeout","setTimeout","clearTimeout","title","sandbox","frameBorder","width","height","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6SAiEeA,MA7Cf,SAAgBC,GAAQ,IACdC,EAA2CD,EAA3CC,SAAUC,EAAiCF,EAAjCE,YAAaC,EAAoBH,EAApBG,MAAOC,EAAaJ,EAAbI,SADjB,EAGGC,oBAAS,GAHZ,mBAGdC,EAHc,KAGRC,EAHQ,KASrB,OACE,sBAAKC,UAAS,2BAAsBF,EAAO,GAAK,aAAhD,UACE,sBAAKE,UAAU,eAAf,UACGN,EAGD,cAAC,IAAD,CAAqBO,KAAMC,MAC3B,wBACEC,QAAS,kBAAMJ,GAAQ,SAACK,GAAD,OAAeA,MACtCC,KAAK,SACLL,UAAU,sBAHZ,SAKE,cAAC,IAAD,CAAiBC,KAAMH,EAAOQ,IAAgBC,WAGlD,cAAC,aAAD,CACEC,eApBN,SAAsBC,EAAQC,EAAMf,GAClCC,EAASD,IAoBLA,MAAOA,EACPK,UAAU,sBACVW,QAAS,CACPC,cAAc,EACdC,MAAM,EACNC,KAAMrB,EACNsB,aAAa,EACbC,MAAO,iBACPC,mBAAmB,EACnBC,eAAe,EACfC,sBAAsB,EACtBC,eAAe,EACfC,YAAY,SChCPC,MAtBf,SAAyBC,EAAKC,GAC5B,IAAMC,EAHO,iBAGgBF,EADa,EAGhB1B,oBAAS,WACjC,IAAM6B,EAAYC,aAAaC,QAAQH,GAEvC,OAAiB,MAAbC,EAA0BG,KAAKC,MAAMJ,GAEb,oBAAjBF,EACFA,IAEAA,KAX+B,mBAGnC7B,EAHmC,KAG5BoC,EAH4B,KAmB1C,OAJAC,qBAAU,WACRL,aAAaM,QAAQR,EAAaI,KAAKK,UAAUvC,MAChD,CAACA,EAAO8B,IAEJ,CAAC9B,EAAOoC,I,iBCmEFI,MApFf,WAAgB,IAAD,EACWb,EAAgB,OAAQ,IADnC,mBACNc,EADM,KACAC,EADA,OAESf,EAAgB,MAAO,IAFhC,mBAENgB,EAFM,KAEDC,EAFC,OAGuBjB,EAAgB,aAAc,IAHrD,mBAGNkB,EAHM,KAGMC,EAHN,OAKe5C,mBAAS,IALxB,mBAKN6C,EALM,KAKEC,EALF,OAMiB9C,oBAAS,GAN1B,mBAMN+C,EANM,KAMGC,EANH,KAsBb,OAdAb,qBAAU,WACR,IAAMc,EAAUC,YAAW,WACzBJ,EAAU,qCAAD,OAEGP,EAFH,qCAGIE,EAHJ,uCAIKE,EAJL,0CAOR,KAEH,OAAO,kBAAMQ,aAAaF,MACzB,CAACV,EAAME,EAAKE,IAGb,qCACE,qBAAKxC,UAAU,QAAf,SACE,+HAMF,sBAAKA,UAAU,OAAf,UACE,sBAAKA,UAAU,gBAAf,UACE,cAAC,EAAD,CACEP,SAAS,MACTC,YAAY,OACZC,MAAOyC,EACPxC,SAAUyC,IAEZ,cAAC,EAAD,CACE5C,SAAS,MACTC,YAAY,MACZC,MAAO2C,EACP1C,SAAU2C,IAQZ,cAAC,EAAD,CACE9C,SAAS,aACTC,YAAY,KACZC,MAAO6C,EACP5C,SAAU6C,OAGd,wBACEtC,QAAS,WACP0C,GAAW,IAEb7C,UAAU,qBAJZ,2BAQA,qBAAKA,UAAU,OAAf,SACE,cAAC,IAAD,CAAY4C,QAASA,EAAShD,SAAUiD,EAAxC,SACE,wBACEH,OAAQA,EACRO,MAAM,SACNC,QAAQ,gBACRC,YAAY,IACZC,MAAM,OACNC,OAAO,OACPrD,UAAU,oCC5ExBsD,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,W","file":"static/js/main.a1dac4de.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"codemirror/lib/codemirror.css\";\r\nimport \"codemirror/theme/material-ocean.css\";\r\nimport \"codemirror/mode/xml/xml\";\r\nimport \"codemirror/mode/javascript/javascript\";\r\nimport \"codemirror/mode/css/css\";\r\n\r\n// CodeMirror Add-ons\r\nimport \"codemirror/addon/edit/closebrackets\";\r\nimport \"codemirror/addon/edit/matchbrackets\";\r\nimport \"codemirror/addon/edit/closetag\";\r\nimport \"codemirror/addon/display/fullscreen\";\r\n// import HtmlIcon from \"@mui/icons-material/Html\";\r\nimport CodeOffOutlinedIcon from \"@mui/icons-material/CodeOffOutlined\";\r\nimport { Controlled as ControlledEditor } from \"react-codemirror2\";\r\n\r\n// Expand-Compress buttons\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCompressAlt, faExpandAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nfunction Editor(props) {\r\n  const { language, displayName, value, onChange } = props;\r\n\r\n  const [open, setOpen] = useState(true);\r\n\r\n  function handleChange(editor, data, value) {\r\n    onChange(value);\r\n  }\r\n\r\n  return (\r\n    <div className={`editor-container ${open ? \"\" : \"collapsed\"}`}>\r\n      <div className=\"editor-title\">\r\n        {displayName}\r\n\r\n        {/* <HtmlIcon icon={HtmlIcon} /> */}\r\n        <CodeOffOutlinedIcon icon={CodeOffOutlinedIcon} />\r\n        <button\r\n          onClick={() => setOpen((prevOpen) => !prevOpen)}\r\n          type=\"button\"\r\n          className=\"expand-collapse-btn\"\r\n        >\r\n          <FontAwesomeIcon icon={open ? faCompressAlt : faExpandAlt} />\r\n        </button>\r\n      </div>\r\n      <ControlledEditor\r\n        onBeforeChange={handleChange}\r\n        value={value}\r\n        className=\"code-mirror-wrapper\"\r\n        options={{\r\n          lineWrapping: true,\r\n          lint: true,\r\n          mode: language,\r\n          lineNumbers: true,\r\n          theme: \"material-ocean\",\r\n          autoCloseBrackets: true,\r\n          matchBrackets: true,\r\n          highlightNonMatching: true,\r\n          autoCloseTags: true,\r\n          fullScreen: true,\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Editor;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nconst PREFIX = \"codepen-clone-\";\r\n\r\nfunction UseLocalStorage(key, initialValue) {\r\n  const prefixedKey = PREFIX + key;\r\n\r\n  const [value, setValue] = useState(() => {\r\n    const jsonValue = localStorage.getItem(prefixedKey);\r\n\r\n    if (jsonValue != null) return JSON.parse(jsonValue);\r\n\r\n    if (typeof initialValue === \"function\") {\r\n      return initialValue();\r\n    } else {\r\n      return initialValue;\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(prefixedKey, JSON.stringify(value));\r\n  }, [value, prefixedKey]);\r\n\r\n  return [value, setValue];\r\n}\r\n\r\nexport default UseLocalStorage;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Editor from \"./Editor\";\r\nimport UseLocalStorage from \"../hooks/UseLocalStorage\";\r\nimport Fullscreen from \"fullscreen-react\";\r\nimport HtmlIcon from \"@mui/icons-material/Html\";\r\n\r\nfunction App() {\r\n  const [html, setHtml] = UseLocalStorage(\"html\", \"\");\r\n  const [css, setCss] = UseLocalStorage(\"css\", \"\");\r\n  const [javascript, setJavascript] = UseLocalStorage(\"javascript\", \"\");\r\n  // const [css1, setCss1] = UseLocalStorage(\"css\", \"\");\r\n  const [srcDoc, setSrcDoc] = useState(\"\");\r\n  const [isEnter, setIsEnter] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const timeout = setTimeout(() => {\r\n      setSrcDoc(`\r\n        <html>\r\n          <body>${html}</body>\r\n          <style>${css}</style>\r\n          <script>${javascript}</script>\r\n        </html>\r\n      `);\r\n    }, 250);\r\n\r\n    return () => clearTimeout(timeout);\r\n  }, [html, css, javascript]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"error\">\r\n        <h1>\r\n          Sorry, but your screen size is too small. Try switching to a screen\r\n          with larger screen size\r\n        </h1>\r\n      </div>\r\n\r\n      <div className=\"norm\">\r\n        <div className=\"pane top-pane\">\r\n          <Editor\r\n            language=\"xml\"\r\n            displayName=\"HTML\"\r\n            value={html}\r\n            onChange={setHtml}\r\n          />\r\n          <Editor\r\n            language=\"css\"\r\n            displayName=\"CSS\"\r\n            value={css}\r\n            onChange={setCss}\r\n          />\r\n          {/* <Editor\r\n            language=\"css\"\r\n            displayName=\"CSS-1\"\r\n            value={css1}\r\n            onChange={setCss1}\r\n          /> */}\r\n          <Editor\r\n            language=\"javascript\"\r\n            displayName=\"Js\"\r\n            value={javascript}\r\n            onChange={setJavascript}\r\n          />\r\n        </div>\r\n        <button\r\n          onClick={() => {\r\n            setIsEnter(true);\r\n          }}\r\n          className=\"fullscreen-toggler\"\r\n        >\r\n          Go Fullscreen\r\n        </button>\r\n        <div className=\"pane\">\r\n          <Fullscreen isEnter={isEnter} onChange={setIsEnter}>\r\n            <iframe\r\n              srcDoc={srcDoc}\r\n              title=\"output\"\r\n              sandbox=\"allow-scripts\"\r\n              frameBorder=\"0\"\r\n              width=\"100%\"\r\n              height=\"100%\"\r\n              className=\"full-screenable-node\"\r\n            />\r\n          </Fullscreen>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './components/App'\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}